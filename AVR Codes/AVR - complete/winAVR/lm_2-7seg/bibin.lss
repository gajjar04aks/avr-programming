
bibin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024a  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000024a  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800060  0000024a  000002de  2**0
                  ALLOC
  3 .noinit       00000000  00800060  00800060  000002de  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000002de  2**0
                  CONTENTS
  5 .stab         000009f0  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000007d9  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 f3 00 	jmp	0x1e6 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <Init_Ports>:
-----------------------------------------------------------------*/
  void Init_Ports(void)
  
  {
  DATA_DDR = DATA_MASK; //for setting data pin's for output
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	84 bb       	out	0x14, r24	; 20
  92:	08 95       	ret

00000094 <Display>:
  }
  
/*----------------------------------------------------------------
-----------------FUNCTIONS TO DISPLAY VALUES----------------------
-----------------------------------------------------------------*/  
  void Display(int a)
  {
  switch(a)
  94:	84 30       	cpi	r24, 0x04	; 4
  96:	91 05       	cpc	r25, r1
  98:	d9 f1       	breq	.+118    	; 0x110 <Display+0x7c>
  9a:	85 30       	cpi	r24, 0x05	; 5
  9c:	91 05       	cpc	r25, r1
  9e:	7c f4       	brge	.+30     	; 0xbe <Display+0x2a>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f1       	breq	.+68     	; 0xea <Display+0x56>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	91 05       	cpc	r25, r1
  aa:	1c f4       	brge	.+6      	; 0xb2 <Display+0x1e>
  ac:	89 2b       	or	r24, r25
  ae:	c9 f0       	breq	.+50     	; 0xe2 <Display+0x4e>
  b0:	08 95       	ret
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	91 05       	cpc	r25, r1
  b6:	01 f1       	breq	.+64     	; 0xf8 <Display+0x64>
  b8:	03 97       	sbiw	r24, 0x03	; 3
  ba:	21 f1       	breq	.+72     	; 0x104 <Display+0x70>
  bc:	08 95       	ret
  be:	87 30       	cpi	r24, 0x07	; 7
  c0:	91 05       	cpc	r25, r1
  c2:	c1 f1       	breq	.+112    	; 0x134 <Display+0xa0>
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	91 05       	cpc	r25, r1
  c8:	34 f4       	brge	.+12     	; 0xd6 <Display+0x42>
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	91 05       	cpc	r25, r1
  ce:	31 f1       	breq	.+76     	; 0x11c <Display+0x88>
  d0:	06 97       	sbiw	r24, 0x06	; 6
  d2:	51 f1       	breq	.+84     	; 0x128 <Display+0x94>
  d4:	08 95       	ret
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	91 05       	cpc	r25, r1
  da:	91 f1       	breq	.+100    	; 0x140 <Display+0xac>
  dc:	09 97       	sbiw	r24, 0x09	; 9
  de:	99 f1       	breq	.+102    	; 0x146 <Display+0xb2>
  e0:	08 95       	ret
  {
  case 0:  
			DATA_PORT|=_BV(Pin_g);
  e2:	ae 9a       	sbi	0x15, 6	; 21
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_b)|_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_f));
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	80 7c       	andi	r24, 0xC0	; 192
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <Display+0x60>
			break;
			
  case 1:
			
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_f)|_BV(Pin_g));
  ea:	85 b3       	in	r24, 0x15	; 21
  ec:	89 67       	ori	r24, 0x79	; 121
  ee:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_b)|_BV(Pin_c));
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	89 7f       	andi	r24, 0xF9	; 249
  f4:	85 bb       	out	0x15, r24	; 21
			break;
  f6:	08 95       	ret
			
  case 2:  
			
  
			DATA_PORT|=(_BV(Pin_c)|_BV(Pin_f));
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	84 62       	ori	r24, 0x24	; 36
  fc:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_b)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_a)|_BV(Pin_g));
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	84 7a       	andi	r24, 0xA4	; 164
 102:	f8 cf       	rjmp	.-16     	; 0xf4 <Display+0x60>
			break;
			
	
  case 3:  
			DATA_PORT|=(_BV(Pin_e)|_BV(Pin_f));
 104:	85 b3       	in	r24, 0x15	; 21
 106:	80 63       	ori	r24, 0x30	; 48
 108:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_a)|_BV(Pin_b)|_BV(Pin_g));
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 7b       	andi	r24, 0xB0	; 176
 10e:	f2 cf       	rjmp	.-28     	; 0xf4 <Display+0x60>
			break;
			

  case 4:  
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e));
 110:	85 b3       	in	r24, 0x15	; 21
 112:	89 61       	ori	r24, 0x19	; 25
 114:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 116:	85 b3       	in	r24, 0x15	; 21
 118:	89 79       	andi	r24, 0x99	; 153
 11a:	ec cf       	rjmp	.-40     	; 0xf4 <Display+0x60>
			break;
			
  case 5:  
			DATA_PORT|=(_BV(Pin_b)|_BV(Pin_e));
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	82 61       	ori	r24, 0x12	; 18
 120:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_f)|_BV(Pin_g));
 122:	85 b3       	in	r24, 0x15	; 21
 124:	82 79       	andi	r24, 0x92	; 146
 126:	e6 cf       	rjmp	.-52     	; 0xf4 <Display+0x60>
			break;
			
  case 6:  
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_b));
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_f)|_BV(Pin_g)|_BV(Pin_e));
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	83 78       	andi	r24, 0x83	; 131
 132:	e0 cf       	rjmp	.-64     	; 0xf4 <Display+0x60>
			break;
			
  case 7:  
			DATA_PORT|=(_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_f)|_BV(Pin_g));
 134:	85 b3       	in	r24, 0x15	; 21
 136:	88 67       	ori	r24, 0x78	; 120
 138:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_c)|_BV(Pin_b));
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	88 7f       	andi	r24, 0xF8	; 248
 13e:	da cf       	rjmp	.-76     	; 0xf4 <Display+0x60>
			break;
			
  case 8:  
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 140:	85 b3       	in	r24, 0x15	; 21
 142:	80 78       	andi	r24, 0x80	; 128
 144:	d7 cf       	rjmp	.-82     	; 0xf4 <Display+0x60>
			break;
		
  case 9:  
			DATA_PORT|=(_BV(Pin_d)|_BV(Pin_e));
 146:	85 b3       	in	r24, 0x15	; 21
 148:	88 61       	ori	r24, 0x18	; 24
 14a:	85 bb       	out	0x15, r24	; 21
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	88 79       	andi	r24, 0x98	; 152
 150:	d1 cf       	rjmp	.-94     	; 0xf4 <Display+0x60>

00000152 <delay_ms>:
			break;
					
	}}

/*----------------------------------------------------------------
--------FUNCTION TO GENERATE DELAY IN MILLISECONDS----------------
-----------------------------------------------------------------*/
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 400;
 152:	24 ec       	ldi	r18, 0xC4	; 196
 154:	39 e0       	ldi	r19, 0x09	; 9

00000156 <L_dl1199>:

	unsigned short cnt;
	asm volatile ("\n"
 156:	e2 2f       	mov	r30, r18
 158:	f3 2f       	mov	r31, r19

0000015a <L_dl2199>:
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <L_dl2199>
 15e:	8a 95       	dec	r24
 160:	d1 f7       	brne	.-12     	; 0x156 <L_dl1199>
 162:	08 95       	ret

00000164 <Init126_Ports>:


void Init126_Ports(void)
{
CONTROL_DDR=CONTROL_MASK; //setting ports for output
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	81 bb       	out	0x11, r24	; 17
CONTROL_PORT&=~(_BV(Led_1)|_BV(Led_2)); //switching off 7 segment at starting
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	8c 7f       	andi	r24, 0xFC	; 252
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	08 95       	ret

00000170 <Ouptut_Display>:
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	7c 01       	movw	r14, r24
 17a:	0e 94 b2 00 	call	0x164 <Init126_Ports>
 17e:	0e 94 47 00 	call	0x8e <Init_Ports>
 182:	90 9a       	sbi	0x12, 0	; 18
 184:	0a e0       	ldi	r16, 0x0A	; 10
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	c7 01       	movw	r24, r14
 18a:	b8 01       	movw	r22, r16
 18c:	0e 94 12 01 	call	0x224 <__divmodhi4>
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	90 70       	andi	r25, 0x00	; 0
 194:	0e 94 4a 00 	call	0x94 <Display>
 198:	90 98       	cbi	0x12, 0	; 18
 19a:	91 9a       	sbi	0x12, 1	; 18
 19c:	c7 01       	movw	r24, r14
 19e:	b8 01       	movw	r22, r16
 1a0:	0e 94 12 01 	call	0x224 <__divmodhi4>
 1a4:	cb 01       	movw	r24, r22
 1a6:	b8 01       	movw	r22, r16
 1a8:	0e 94 fe 00 	call	0x1fc <__udivmodhi4>
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	90 70       	andi	r25, 0x00	; 0
 1b0:	0e 94 4a 00 	call	0x94 <Display>
 1b4:	91 98       	cbi	0x12, 1	; 18
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	08 95       	ret

000001c0 <Init_ADC>:
void Init_ADC(void)
{

    
	ADMUX|=(_BV(ADLAR) | _BV(REFS1)| _BV(REFS0)) ;
 1c0:	87 b1       	in	r24, 0x07	; 7
 1c2:	80 6e       	ori	r24, 0xE0	; 224
 1c4:	87 b9       	out	0x07, r24	; 7
	// RFS1 and RFS0 are for Internal Reference voltage of 2.56V  AND 8 BIT CONVERSION
	ADMUX&=~(_BV(MUX0)|_BV(MUX1)|_BV(MUX2)|_BV(MUX3)|_BV(MUX4)); //SELECTING CHANNEL0
 1c6:	87 b1       	in	r24, 0x07	; 7
 1c8:	80 7e       	andi	r24, 0xE0	; 224
 1ca:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=(_BV(ADEN) | _BV(ADPS2) | _BV(ADPS0)) ; //normal conversion without interrupt 
 1cc:	86 b1       	in	r24, 0x06	; 6
 1ce:	85 68       	ori	r24, 0x85	; 133
 1d0:	86 b9       	out	0x06, r24	; 6
	ADCSRA&=~(_BV(ADSC)|_BV(ADATE)|_BV(ADIF)|_BV(ADIE)|_BV(ADPS1));//clock/32 speed
 1d2:	86 b1       	in	r24, 0x06	; 6
 1d4:	85 78       	andi	r24, 0x85	; 133
 1d6:	86 b9       	out	0x06, r24	; 6
 1d8:	08 95       	ret

000001da <Read_ADC>:
      
}

int Read_ADC(void)
{
ADCSRA|=_BV(ADSC); //start conversion
 1da:	36 9a       	sbi	0x06, 6	; 6
while(!((ADCSRA&_BV(ADIF))>>ADIF));
 1dc:	34 9b       	sbis	0x06, 4	; 6
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <Read_ADC+0x2>
return ADCH;
 1e0:	85 b1       	in	r24, 0x05	; 5
}
 1e2:	99 27       	eor	r25, r25
 1e4:	08 95       	ret

000001e6 <main>:
 1e6:	cf e5       	ldi	r28, 0x5F	; 95
 1e8:	d8 e0       	ldi	r29, 0x08	; 8
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	0e 94 e0 00 	call	0x1c0 <Init_ADC>
 1f2:	0e 94 ed 00 	call	0x1da <Read_ADC>
 1f6:	0e 94 b8 00 	call	0x170 <Ouptut_Display>
 1fa:	fb cf       	rjmp	.-10     	; 0x1f2 <main+0xc>

000001fc <__udivmodhi4>:
 1fc:	aa 1b       	sub	r26, r26
 1fe:	bb 1b       	sub	r27, r27
 200:	51 e1       	ldi	r21, 0x11	; 17
 202:	07 c0       	rjmp	.+14     	; 0x212 <__udivmodhi4_ep>

00000204 <__udivmodhi4_loop>:
 204:	aa 1f       	adc	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	a6 17       	cp	r26, r22
 20a:	b7 07       	cpc	r27, r23
 20c:	10 f0       	brcs	.+4      	; 0x212 <__udivmodhi4_ep>
 20e:	a6 1b       	sub	r26, r22
 210:	b7 0b       	sbc	r27, r23

00000212 <__udivmodhi4_ep>:
 212:	88 1f       	adc	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	5a 95       	dec	r21
 218:	a9 f7       	brne	.-22     	; 0x204 <__udivmodhi4_loop>
 21a:	80 95       	com	r24
 21c:	90 95       	com	r25
 21e:	bc 01       	movw	r22, r24
 220:	cd 01       	movw	r24, r26
 222:	08 95       	ret

00000224 <__divmodhi4>:
 224:	97 fb       	bst	r25, 7
 226:	09 2e       	mov	r0, r25
 228:	07 26       	eor	r0, r23
 22a:	0a d0       	rcall	.+20     	; 0x240 <__divmodhi4_neg1>
 22c:	77 fd       	sbrc	r23, 7
 22e:	04 d0       	rcall	.+8      	; 0x238 <__divmodhi4_neg2>
 230:	e5 df       	rcall	.-54     	; 0x1fc <__udivmodhi4>
 232:	06 d0       	rcall	.+12     	; 0x240 <__divmodhi4_neg1>
 234:	00 20       	and	r0, r0
 236:	1a f4       	brpl	.+6      	; 0x23e <__divmodhi4_exit>

00000238 <__divmodhi4_neg2>:
 238:	70 95       	com	r23
 23a:	61 95       	neg	r22
 23c:	7f 4f       	sbci	r23, 0xFF	; 255

0000023e <__divmodhi4_exit>:
 23e:	08 95       	ret

00000240 <__divmodhi4_neg1>:
 240:	f6 f7       	brtc	.-4      	; 0x23e <__divmodhi4_exit>
 242:	90 95       	com	r25
 244:	81 95       	neg	r24
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	08 95       	ret
