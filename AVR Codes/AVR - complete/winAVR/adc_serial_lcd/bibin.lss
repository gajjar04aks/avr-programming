
bibin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0080006e  0000029e  00000332  2**0
                  ALLOC
  3 .noinit       00000000  0080006e  0080006e  00000332  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000332  2**0
                  CONTENTS
  5 .stab         00000b94  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000089c  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 bc 00 	jmp	0x178 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <delay_ms>:
--------FUNCTION TO GENERATE DELAY IN MILLISECONDS----------------
-----------------------------------------------------------------*/
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 400;
  8e:	24 ec       	ldi	r18, 0xC4	; 196
  90:	39 e0       	ldi	r19, 0x09	; 9

00000092 <L_dl17>:

	unsigned short cnt;
	asm volatile ("\n"
  92:	e2 2f       	mov	r30, r18
  94:	f3 2f       	mov	r31, r19

00000096 <L_dl27>:
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <L_dl27>
  9a:	8a 95       	dec	r24
  9c:	d1 f7       	brne	.-12     	; 0x92 <L_dl17>
  9e:	08 95       	ret

000000a0 <Lcd_Send>:
  a0:	94 9a       	sbi	0x12, 4	; 18
  a2:	95 98       	cbi	0x12, 5	; 18
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	96 9a       	sbi	0x12, 6	; 18
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	0e 94 47 00 	call	0x8e <delay_ms>
  ae:	96 98       	cbi	0x12, 6	; 18
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 47 00 	call	0x8e <delay_ms>
  b6:	08 95       	ret

000000b8 <Init_Ports>:
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	81 bb       	out	0x11, r24	; 17
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	8f 78       	andi	r24, 0x8F	; 143
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	08 95       	ret

000000c8 <Init_Lcd>:
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	2a 97       	sbiw	r28, 0x0a	; 10
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	8a 83       	std	Y+2, r24	; 0x02
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	8b 83       	std	Y+3, r24	; 0x03
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	8c 83       	std	Y+4, r24	; 0x04
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	8d 83       	std	Y+5, r24	; 0x05
  f4:	94 98       	cbi	0x12, 4	; 18
  f6:	95 98       	cbi	0x12, 5	; 18
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	fe 01       	movw	r30, r28
  fe:	e0 0f       	add	r30, r16
 100:	f1 1f       	adc	r31, r17
 102:	81 81       	ldd	r24, Z+1	; 0x01
 104:	85 bb       	out	0x15, r24	; 21
 106:	96 9a       	sbi	0x12, 6	; 18
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	0e 94 47 00 	call	0x8e <delay_ms>
 10e:	96 98       	cbi	0x12, 6	; 18
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 47 00 	call	0x8e <delay_ms>
 116:	0f 5f       	subi	r16, 0xFF	; 255
 118:	1f 4f       	sbci	r17, 0xFF	; 255
 11a:	05 30       	cpi	r16, 0x05	; 5
 11c:	11 05       	cpc	r17, r1
 11e:	74 f3       	brlt	.-36     	; 0xfc <Init_Lcd+0x34>
 120:	2a 96       	adiw	r28, 0x0a	; 10
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <InitUART>:
-----------------------------------------------------------------*/

 void InitUART( unsigned char baudrate )
  {
    UBRRL =  baudrate;                   /*  Set the baud rate */
 136:	89 b9       	out	0x09, r24	; 9
    UCSRB = (UCSRB | _BV(RXEN) | _BV(TXEN) );  /* Enable UART   receiver and transmitter */
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	88 61       	ori	r24, 0x18	; 24
 13c:	8a b9       	out	0x0a, r24	; 10
 13e:	08 95       	ret

00000140 <ReceiveByte>:
  }
/*----------------------------------------------------------------
------------FUNCTIONS TO READ UART-------------------------------
-----------------------------------------------------------------*/
  unsigned char ReceiveByte( void )
  {
   while ( !(UCSRA &  (_BV(RXC))) );     /*  Wait for incomming data   */
 140:	5f 9b       	sbis	0x0b, 7	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <ReceiveByte>
   return UDR;/* Return the   data */
 144:	8c b1       	in	r24, 0x0c	; 12
  }
 146:	99 27       	eor	r25, r25
 148:	08 95       	ret

0000014a <TransmitByte>:

/*----------------------------------------------------------------
------------FUNCTIONS TO WRITE UART-------------------------------
-----------------------------------------------------------------*/
  void TransmitByte( unsigned char data )
  {
   while ( !(UCSRA & (_BV(UDRE))) );        /* Wait for   empty transmit buffer */
 14a:	5d 9b       	sbis	0x0b, 5	; 11
 14c:	fe cf       	rjmp	.-4      	; 0x14a <TransmitByte>
   UDR =  data;  /* Start transmittion   */
 14e:	8c b9       	out	0x0c, r24	; 12
 150:	08 95       	ret

00000152 <Init_ADC>:
void Init_ADC(void)
{

    
	ADMUX|=(_BV(ADLAR) | _BV(REFS1)| _BV(REFS0)) ;
 152:	87 b1       	in	r24, 0x07	; 7
 154:	80 6e       	ori	r24, 0xE0	; 224
 156:	87 b9       	out	0x07, r24	; 7
	// RFS1 and RFS0 are for Internal Reference voltage of 2.56V  AND 8 BIT CONVERSION
	ADMUX&=~(_BV(MUX0)|_BV(MUX1)|_BV(MUX2)|_BV(MUX3)|_BV(MUX4)); //SELECTING CHANNEL0
 158:	87 b1       	in	r24, 0x07	; 7
 15a:	80 7e       	andi	r24, 0xE0	; 224
 15c:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=(_BV(ADEN) | _BV(ADPS2) | _BV(ADPS0)) ; //normal conversion without interrupt 
 15e:	86 b1       	in	r24, 0x06	; 6
 160:	85 68       	ori	r24, 0x85	; 133
 162:	86 b9       	out	0x06, r24	; 6
	ADCSRA&=~(_BV(ADSC)|_BV(ADATE)|_BV(ADIF)|_BV(ADIE)|_BV(ADPS1));//clock/32 speed
 164:	86 b1       	in	r24, 0x06	; 6
 166:	85 78       	andi	r24, 0x85	; 133
 168:	86 b9       	out	0x06, r24	; 6
 16a:	08 95       	ret

0000016c <Read_ADC>:
      
}

int Read_ADC(void)
{
ADCSRA|=_BV(ADSC); //start conversion
 16c:	36 9a       	sbi	0x06, 6	; 6
while(!((ADCSRA&_BV(ADIF))>>ADIF));
 16e:	34 9b       	sbis	0x06, 4	; 6
 170:	fe cf       	rjmp	.-4      	; 0x16e <Read_ADC+0x2>
return ADCH;
 172:	85 b1       	in	r24, 0x05	; 5
}
 174:	99 27       	eor	r25, r25
 176:	08 95       	ret

00000178 <main>:
-----------------MAIN FUNCTION------------------------------------
-----------------------------------------------------------------*/
  
void main()
{
 178:	cf e4       	ldi	r28, 0x4F	; 79
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61
unsigned int i,j,a,b,k;
unsigned char str[14]={'T','E','M','P','E','R','A','T','U','R','E',':',' ',' '};//at starting some backspace occurs
 180:	5e 01       	movw	r10, r28
 182:	08 94       	sec
 184:	a1 1c       	adc	r10, r1
 186:	b1 1c       	adc	r11, r1
 188:	d5 01       	movw	r26, r10
 18a:	e0 e6       	ldi	r30, 0x60	; 96
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	81 50       	subi	r24, 0x01	; 1
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x18>
unsigned char del[2]={0x08,0X08}; //for deleting previous reading
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	8f 87       	std	Y+15, r24	; 0x0f
 19c:	2f e0       	ldi	r18, 0x0F	; 15
 19e:	82 2e       	mov	r8, r18
 1a0:	91 2c       	mov	r9, r1
 1a2:	8c 0e       	add	r8, r28
 1a4:	9d 1e       	adc	r9, r29
 1a6:	88 8b       	std	Y+16, r24	; 0x10
//serial port initiliasation
InitUART( 25 ); //1Mhz 2400 8n1
 1a8:	89 e1       	ldi	r24, 0x19	; 25
 1aa:	0e 94 9b 00 	call	0x136 <InitUART>
//TransmitByte();

//Lcd startups
Init_Ports();
 1ae:	0e 94 5c 00 	call	0xb8 <Init_Ports>
Init_Lcd();
 1b2:	0e 94 64 00 	call	0xc8 <Init_Lcd>

//ADC startups
Init_ADC();
 1b6:	0e 94 a9 00 	call	0x152 <Init_ADC>
 1ba:	85 01       	movw	r16, r10
 1bc:	9d e0       	ldi	r25, 0x0D	; 13
 1be:	e9 2e       	mov	r14, r25
 1c0:	f1 2c       	mov	r15, r1
 1c2:	ea 0c       	add	r14, r10
 1c4:	fb 1c       	adc	r15, r11
//Read_ADC(void)




//strating the main 


//sending the string
for(i=0;i<14;i++)
{
Lcd_Send(str[i]);
 1c6:	f8 01       	movw	r30, r16
 1c8:	80 81       	ld	r24, Z
 1ca:	0e 94 50 00 	call	0xa0 <Lcd_Send>
TransmitByte(str[i]);
 1ce:	f8 01       	movw	r30, r16
 1d0:	81 91       	ld	r24, Z+
 1d2:	8f 01       	movw	r16, r30
 1d4:	0e 94 a5 00 	call	0x14a <TransmitByte>
 1d8:	e0 16       	cp	r14, r16
 1da:	f1 06       	cpc	r15, r17
 1dc:	a0 f7       	brcc	.-24     	; 0x1c6 <main+0x4e>
}
b=0;
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0

do
{
a=Read_ADC();
 1e2:	0e 94 b6 00 	call	0x16c <Read_ADC>
 1e6:	6c 01       	movw	r12, r24
if(a!=b)
 1e8:	80 17       	cp	r24, r16
 1ea:	91 07       	cpc	r25, r17
 1ec:	d1 f3       	breq	.-12     	; 0x1e2 <main+0x6a>
{
//first delete the previous values for uart
	for(i=0;i<2;i++)
	{
	TransmitByte(del[i]);
 1ee:	f4 01       	movw	r30, r8
 1f0:	80 81       	ld	r24, Z
 1f2:	0e 94 a5 00 	call	0x14a <TransmitByte>
 1f6:	f4 01       	movw	r30, r8
 1f8:	81 81       	ldd	r24, Z+1	; 0x01
 1fa:	0e 94 a5 00 	call	0x14a <TransmitByte>
	}
	
//for LCD we require initialiatization
	Init_Lcd();
 1fe:	0e 94 64 00 	call	0xc8 <Init_Lcd>
 202:	85 01       	movw	r16, r10
 204:	8b e0       	ldi	r24, 0x0B	; 11
 206:	e8 2e       	mov	r14, r24
 208:	f1 2c       	mov	r15, r1
 20a:	ea 0c       	add	r14, r10
 20c:	fb 1c       	adc	r15, r11
	for(i=0;i<12;i++)
	Lcd_Send(str[i]);
 20e:	f8 01       	movw	r30, r16
 210:	81 91       	ld	r24, Z+
 212:	8f 01       	movw	r16, r30
 214:	0e 94 50 00 	call	0xa0 <Lcd_Send>
 218:	e0 16       	cp	r14, r16
 21a:	f1 06       	cpc	r15, r17
 21c:	c0 f7       	brcc	.-16     	; 0x20e <main+0x96>
	

	
	
j=a%10;
 21e:	c6 01       	movw	r24, r12
 220:	6a e0       	ldi	r22, 0x0A	; 10
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 34 01 	call	0x268 <__udivmodhi4>
 228:	7c 01       	movw	r14, r24

k=a/10;
 22a:	c6 01       	movw	r24, r12
 22c:	6a e0       	ldi	r22, 0x0A	; 10
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	0e 94 34 01 	call	0x268 <__udivmodhi4>
 234:	cb 01       	movw	r24, r22
k=k%10;
 236:	6a e0       	ldi	r22, 0x0A	; 10
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	0e 94 34 01 	call	0x268 <__udivmodhi4>
Lcd_Send((k+0x30));
 23e:	18 2f       	mov	r17, r24
 240:	10 5d       	subi	r17, 0xD0	; 208
 242:	81 2f       	mov	r24, r17
 244:	0e 94 50 00 	call	0xa0 <Lcd_Send>
TransmitByte((k+0x30));
 248:	81 2f       	mov	r24, r17
 24a:	0e 94 a5 00 	call	0x14a <TransmitByte>

Lcd_Send((j+0x30)); //since both will display ASCII values, we convert decimal to ASCII
 24e:	1e 2d       	mov	r17, r14
 250:	10 5d       	subi	r17, 0xD0	; 208
 252:	81 2f       	mov	r24, r17
 254:	0e 94 50 00 	call	0xa0 <Lcd_Send>
TransmitByte((j+0x30));
 258:	81 2f       	mov	r24, r17
 25a:	0e 94 a5 00 	call	0x14a <TransmitByte>

b=a; //for next value 
 25e:	86 01       	movw	r16, r12
//delay sometime (1s) otherwise LCD display will run
	delay(1000);
 260:	88 ee       	ldi	r24, 0xE8	; 232
 262:	0e 94 47 00 	call	0x8e <delay_ms>
}

}
 266:	bd cf       	rjmp	.-134    	; 0x1e2 <main+0x6a>

00000268 <__udivmodhi4>:
 268:	aa 1b       	sub	r26, r26
 26a:	bb 1b       	sub	r27, r27
 26c:	51 e1       	ldi	r21, 0x11	; 17
 26e:	07 c0       	rjmp	.+14     	; 0x27e <__udivmodhi4_ep>

00000270 <__udivmodhi4_loop>:
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	a6 17       	cp	r26, r22
 276:	b7 07       	cpc	r27, r23
 278:	10 f0       	brcs	.+4      	; 0x27e <__udivmodhi4_ep>
 27a:	a6 1b       	sub	r26, r22
 27c:	b7 0b       	sbc	r27, r23

0000027e <__udivmodhi4_ep>:
 27e:	88 1f       	adc	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	5a 95       	dec	r21
 284:	a9 f7       	brne	.-22     	; 0x270 <__udivmodhi4_loop>
 286:	80 95       	com	r24
 288:	90 95       	com	r25
 28a:	bc 01       	movw	r22, r24
 28c:	cd 01       	movw	r24, r26
 28e:	08 95       	ret
