
bibin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000178  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800060  00000178  0000020c  2**0
                  ALLOC
  3 .noinit       00000000  00800060  00800060  0000020c  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000020c  2**0
                  CONTENTS
  5 .stab         00000978  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000007e2  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 9b 00 	jmp	0x136 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <delay_ms>:
--------FUNCTION TO GENERATE DELAY IN MILLISECONDS----------------
-----------------------------------------------------------------*/
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 400;
  8e:	24 ec       	ldi	r18, 0xC4	; 196
  90:	39 e0       	ldi	r19, 0x09	; 9

00000092 <L_dl17>:

	unsigned short cnt;
	asm volatile ("\n"
  92:	e2 2f       	mov	r30, r18
  94:	f3 2f       	mov	r31, r19

00000096 <L_dl27>:
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <L_dl27>
  9a:	8a 95       	dec	r24
  9c:	d1 f7       	brne	.-12     	; 0x92 <L_dl17>
  9e:	08 95       	ret

000000a0 <Lcd_Send>:
  a0:	94 9a       	sbi	0x12, 4	; 18
  a2:	95 98       	cbi	0x12, 5	; 18
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	96 9a       	sbi	0x12, 6	; 18
  a8:	8e e1       	ldi	r24, 0x1E	; 30
  aa:	0e 94 47 00 	call	0x8e <delay_ms>
  ae:	96 98       	cbi	0x12, 6	; 18
  b0:	8e e1       	ldi	r24, 0x1E	; 30
  b2:	0e 94 47 00 	call	0x8e <delay_ms>
  b6:	08 95       	ret

000000b8 <Init_Ports>:
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	81 bb       	out	0x11, r24	; 17
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	8f 78       	andi	r24, 0x8F	; 143
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	08 95       	ret

000000c8 <Init_Lcd>:
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	2a 97       	sbiw	r28, 0x0a	; 10
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	8a 83       	std	Y+2, r24	; 0x02
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	8b 83       	std	Y+3, r24	; 0x03
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	8c 83       	std	Y+4, r24	; 0x04
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	8d 83       	std	Y+5, r24	; 0x05
  f4:	94 98       	cbi	0x12, 4	; 18
  f6:	95 98       	cbi	0x12, 5	; 18
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	fe 01       	movw	r30, r28
  fe:	e0 0f       	add	r30, r16
 100:	f1 1f       	adc	r31, r17
 102:	81 81       	ldd	r24, Z+1	; 0x01
 104:	8b bb       	out	0x1b, r24	; 27
 106:	96 9a       	sbi	0x12, 6	; 18
 108:	8e e1       	ldi	r24, 0x1E	; 30
 10a:	0e 94 47 00 	call	0x8e <delay_ms>
 10e:	96 98       	cbi	0x12, 6	; 18
 110:	8e e1       	ldi	r24, 0x1E	; 30
 112:	0e 94 47 00 	call	0x8e <delay_ms>
 116:	0f 5f       	subi	r16, 0xFF	; 255
 118:	1f 4f       	sbci	r17, 0xFF	; 255
 11a:	05 30       	cpi	r16, 0x05	; 5
 11c:	11 05       	cpc	r17, r1
 11e:	74 f3       	brlt	.-36     	; 0xfc <Init_Lcd+0x34>
 120:	2a 96       	adiw	r28, 0x0a	; 10
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <main>:
-----------------------------------------------------------------*/
void Init_Ports922(void);

void main()
{
 136:	cf e5       	ldi	r28, 0x5F	; 95
 138:	d8 e0       	ldi	r29, 0x08	; 8
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	cd bf       	out	0x3d, r28	; 61
unsigned int i;
Init_Ports();
 13e:	0e 94 5c 00 	call	0xb8 <Init_Ports>
Output_Enable;
 142:	ad 98       	cbi	0x15, 5	; 21
//lcd initializationsa
	Init_Ports();
 144:	0e 94 5c 00 	call	0xb8 <Init_Ports>
	Init_Lcd();
 148:	0e 94 64 00 	call	0xc8 <Init_Lcd>

do
{
i=IC_PIN&0X0F;
 14c:	83 b3       	in	r24, 0x13	; 19
 14e:	99 27       	eor	r25, r25
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	90 70       	andi	r25, 0x00	; 0
if(i<10) i+=0x30; //in case of decimal values
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	91 05       	cpc	r25, r1
 158:	08 f4       	brcc	.+2      	; 0x15c <main+0x26>
 15a:	c0 96       	adiw	r24, 0x30	; 48
if(i>9) i+=55 ;//for showing alphabets
 15c:	8a 30       	cpi	r24, 0x0A	; 10
 15e:	91 05       	cpc	r25, r1
 160:	08 f0       	brcs	.+2      	; 0x164 <main+0x2e>
 162:	c7 96       	adiw	r24, 0x37	; 55
Lcd_Send(i);
 164:	0e 94 50 00 	call	0xa0 <Lcd_Send>
while(!((IC_PIN&_BV(Pin_DA))>>Pin_DA));
 168:	9c 9b       	sbis	0x13, 4	; 19
 16a:	fe cf       	rjmp	.-4      	; 0x168 <main+0x32>

}
 16c:	ef cf       	rjmp	.-34     	; 0x14c <main+0x16>

0000016e <Init_Ports922>:
while(1);
}



/*----------------------------------------------------------------
-----------------FUNCTIONS TO INITIALIZE PORTS--------------------
-----------------------------------------------------------------*/
void Init_Ports922(void)
{
IC_DDR=IC_Mask; //setting OE pins for output,remaining for input
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	84 bb       	out	0x14, r24	; 20
Output_DDR=0XFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	81 bb       	out	0x11, r24	; 17
 176:	08 95       	ret
