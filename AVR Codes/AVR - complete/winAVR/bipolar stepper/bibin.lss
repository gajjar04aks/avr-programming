
bibin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000000fa  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800068  00000102  00000196  2**0
                  ALLOC
  3 .noinit       00000000  00800068  00800068  00000196  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000196  2**0
                  CONTENTS
  5 .stab         000007a4  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000792  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 57 00 	jmp	0xae <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <Init_Ports>:
-----------------FUNCTIONS TO INITIALIZE PORTS--------------------
-----------------------------------------------------------------*/
void Init_Ports(void)
{
L293D_DDR|=(_BV(Pin_1 )|_BV(Pin_2)|_BV(Pin_3 )|_BV(Pin_4)); //setting pins for output
  8e:	84 b3       	in	r24, 0x14	; 20
  90:	8f 60       	ori	r24, 0x0F	; 15
  92:	84 bb       	out	0x14, r24	; 20
L293D_PORT&=~(_BV(Pin_1 )|_BV(Pin_2)|_BV(Pin_3 )|_BV(Pin_4));//starting motor is Off
  94:	85 b3       	in	r24, 0x15	; 21
  96:	80 7f       	andi	r24, 0xF0	; 240
  98:	85 bb       	out	0x15, r24	; 21
  9a:	08 95       	ret

0000009c <delay_ms>:
}
/*----------------------------------------------------------------
--------FUNCTION TO GENERATE DELAY IN MILLISECONDS----------------
-----------------------------------------------------------------*/
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 400;
  9c:	24 ec       	ldi	r18, 0xC4	; 196
  9e:	39 e0       	ldi	r19, 0x09	; 9

000000a0 <L_dl119>:

	unsigned short cnt;
	asm volatile ("\n"
  a0:	e2 2f       	mov	r30, r18
  a2:	f3 2f       	mov	r31, r19

000000a4 <L_dl219>:
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <L_dl219>
  a8:	8a 95       	dec	r24
  aa:	d1 f7       	brne	.-12     	; 0xa0 <L_dl119>
  ac:	08 95       	ret

000000ae <main>:
  ae:	c7 e5       	ldi	r28, 0x57	; 87
  b0:	d8 e0       	ldi	r29, 0x08	; 8
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61
  b6:	7e 01       	movw	r14, r28
  b8:	08 94       	sec
  ba:	e1 1c       	adc	r14, r1
  bc:	f1 1c       	adc	r15, r1
  be:	d7 01       	movw	r26, r14
  c0:	e0 e6       	ldi	r30, 0x60	; 96
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x18>
  ce:	0e 94 47 00 	call	0x8e <Init_Ports>
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	f8 01       	movw	r30, r16
  d8:	e0 0f       	add	r30, r16
  da:	f1 1f       	adc	r31, r17
  dc:	ee 0d       	add	r30, r14
  de:	ff 1d       	adc	r31, r15
  e0:	80 81       	ld	r24, Z
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	0f 5f       	subi	r16, 0xFF	; 255
  e6:	1f 4f       	sbci	r17, 0xFF	; 255
  e8:	05 30       	cpi	r16, 0x05	; 5
  ea:	11 05       	cpc	r17, r1
  ec:	14 f0       	brlt	.+4      	; 0xf2 <main+0x44>
  ee:	00 e0       	ldi	r16, 0x00	; 0
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	82 e3       	ldi	r24, 0x32	; 50
  f4:	0e 94 4e 00 	call	0x9c <delay_ms>
  f8:	ee cf       	rjmp	.-36     	; 0xd6 <main+0x28>
