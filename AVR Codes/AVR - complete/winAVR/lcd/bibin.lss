
bibin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0080006a  00000186  0000021a  2**0
                  ALLOC
  3 .noinit       00000000  0080006a  0080006a  0000021a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000021a  2**0
                  CONTENTS
  5 .stab         000008e8  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000007de  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 9b 00 	jmp	0x136 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <Init_Ports>:
-----------------FUNCTIONS TO INITIALIZE PORTS--------------------
-----------------------------------------------------------------*/
void Init_Ports(void)
{
DATA_DDR=0XFF; //Setting data port for output
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26
CONTROL_DDR=CONTROL_MASK;//setting selected pins of control port for output
  92:	80 e7       	ldi	r24, 0x70	; 112
  94:	81 bb       	out	0x11, r24	; 17
CONTROL_PORT&=~(_BV(Enable_Pin)|_BV(RegSelect_Pin )|_BV(ReadWrite_Pin)); //setting values to 0 at starting
  96:	82 b3       	in	r24, 0x12	; 18
  98:	8f 78       	andi	r24, 0x8F	; 143
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	08 95       	ret

0000009e <delay_ms>:
}




/*----------------------------------------------------------------
------------FUNCTION TO INITIATE LCD -----------------------------
-----------------------------------------------------------------*/
void Init_Lcd(void)
{
char init[10];
 int i;
 init[0] = 0x01; 
 init[1] = 0x38;
 init[2] = 0x0c;
 init[3] = 0x06;
 init[4] = 0x80;
Select_InstructionRegister;
Write_Lcd;
	for(i=0;i<5;i++)
	{
	Data_Lcd(init[i]);
	Set_Enable;
	delay(30);
	Clear_Enable;
	delay(30);
	}
}




/*----------------------------------------------------------------
--------FUNCTION TO GENERATE DELAY IN MILLISECONDS----------------
-----------------------------------------------------------------*/
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 400;
  9e:	24 ec       	ldi	r18, 0xC4	; 196
  a0:	39 e0       	ldi	r19, 0x09	; 9

000000a2 <L_dl121>:

	unsigned short cnt;
	asm volatile ("\n"
  a2:	e2 2f       	mov	r30, r18
  a4:	f3 2f       	mov	r31, r19

000000a6 <L_dl221>:
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <L_dl221>
  aa:	8a 95       	dec	r24
  ac:	d1 f7       	brne	.-12     	; 0xa2 <L_dl121>
  ae:	08 95       	ret

000000b0 <Init_Lcd>:
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	2a 97       	sbiw	r28, 0x0a	; 10
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	88 e3       	ldi	r24, 0x38	; 56
  ce:	8a 83       	std	Y+2, r24	; 0x02
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	8b 83       	std	Y+3, r24	; 0x03
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	8c 83       	std	Y+4, r24	; 0x04
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	8d 83       	std	Y+5, r24	; 0x05
  dc:	94 98       	cbi	0x12, 4	; 18
  de:	95 98       	cbi	0x12, 5	; 18
  e0:	00 e0       	ldi	r16, 0x00	; 0
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	fe 01       	movw	r30, r28
  e6:	e0 0f       	add	r30, r16
  e8:	f1 1f       	adc	r31, r17
  ea:	81 81       	ldd	r24, Z+1	; 0x01
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	96 9a       	sbi	0x12, 6	; 18
  f0:	8e e1       	ldi	r24, 0x1E	; 30
  f2:	0e 94 4f 00 	call	0x9e <delay_ms>
  f6:	96 98       	cbi	0x12, 6	; 18
  f8:	8e e1       	ldi	r24, 0x1E	; 30
  fa:	0e 94 4f 00 	call	0x9e <delay_ms>
  fe:	0f 5f       	subi	r16, 0xFF	; 255
 100:	1f 4f       	sbci	r17, 0xFF	; 255
 102:	05 30       	cpi	r16, 0x05	; 5
 104:	11 05       	cpc	r17, r1
 106:	74 f3       	brlt	.-36     	; 0xe4 <Init_Lcd+0x34>
 108:	2a 96       	adiw	r28, 0x0a	; 10
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <Lcd_Send>:
 11e:	94 9a       	sbi	0x12, 4	; 18
 120:	95 98       	cbi	0x12, 5	; 18
 122:	8b bb       	out	0x1b, r24	; 27
 124:	96 9a       	sbi	0x12, 6	; 18
 126:	8e e1       	ldi	r24, 0x1E	; 30
 128:	0e 94 4f 00 	call	0x9e <delay_ms>
 12c:	96 98       	cbi	0x12, 6	; 18
 12e:	8e e1       	ldi	r24, 0x1E	; 30
 130:	0e 94 4f 00 	call	0x9e <delay_ms>
 134:	08 95       	ret

00000136 <main>:
 136:	c5 e5       	ldi	r28, 0x55	; 85
 138:	d8 e0       	ldi	r29, 0x08	; 8
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	8e 01       	movw	r16, r28
 140:	0f 5f       	subi	r16, 0xFF	; 255
 142:	1f 4f       	sbci	r17, 0xFF	; 255
 144:	d8 01       	movw	r26, r16
 146:	e0 e6       	ldi	r30, 0x60	; 96
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	01 90       	ld	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	81 50       	subi	r24, 0x01	; 1
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x16>
 154:	0e 94 47 00 	call	0x8e <Init_Ports>
 158:	0e 94 58 00 	call	0xb0 <Init_Lcd>
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	e8 2e       	mov	r14, r24
 160:	f1 2c       	mov	r15, r1
 162:	e0 0e       	add	r14, r16
 164:	f1 1e       	adc	r15, r17
 166:	f8 01       	movw	r30, r16
 168:	81 91       	ld	r24, Z+
 16a:	8f 01       	movw	r16, r30
 16c:	0e 94 8f 00 	call	0x11e <Lcd_Send>
 170:	0e 15       	cp	r16, r14
 172:	1f 05       	cpc	r17, r15
 174:	c4 f3       	brlt	.-16     	; 0x166 <main+0x30>
 176:	0c 94 bd 00 	jmp	0x17a <_exit>

0000017a <_exit>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <_exit>
